@page "/weather"
@attribute [StreamRendering]
@rendermode InteractiveServer

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>


    <!-- This page is rendered in SSR mode, so the FluentDataGrid component does not offer any interactivity (like sorting). -->
    <FluentDataGrid Items="forecasts" >
        <TemplateColumn Title="">
            <FluentButton Appearance="Appearance.Accent" Type="ButtonType.Button" >
                <span slot="start">
                    <FluentIcon Icon="Icons.Regular.Size24.EyeLines" Color="Color.Info" />
                </span>
                Description
            </FluentButton>
        </TemplateColumn>
        <PropertyColumn  Property="@(c => c!.Date)" Align="Align.Start"/>
        <PropertyColumn  Property="@(c => c!.TemperatureC)" Align="Align.Center"/>
        <PropertyColumn  Property="@(c => c!.TemperatureF)" Align="Align.Center"/>
        <PropertyColumn  Property="@(c => c!.Summary)" Align="Align.End"/>
    </FluentDataGrid>


@code {
    private IQueryable<WeatherForecast>? forecasts;

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(50);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast
        {
            Date = startDate.AddDays(index),
            TemperatureC = Random.Shared.Next(-20, 55),
            Summary = summaries[Random.Shared.Next(summaries.Length)]
        }).AsQueryable();
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
